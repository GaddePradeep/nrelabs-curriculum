---
- name: Prep instances (sudo)
  hosts: tag_kubernetes
  become: yes
  tasks:

    - name: Configure kubernetes repo
      template:
        src: templates/kubernetes.repo
        dest:  /etc/yum.repos.d/kubernetes.repo

    - name: Install deps
      package:
        name: "{{ item }}"
        state: latest
      with_items:
        - epel-release
        - python-pip
        - git
        - lsof
        - htop
        - bridge-utils
        - docker
        - kubelet
        - kubeadm
        - kubectl
        - go

    - name: Enable and restart services
      systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: yes
        enabled: True
      with_items:
        - kubelet
        - docker

    - name: Enable and restart services
      systemd:
        name: firewalld
        state: stopped
        enabled: False
      with_items:
        - kubelet
        - docker

    - name: Configure kubernetes repo
      template:
        src: templates/sysctl-k8s.conf
        dest:  /etc/sysctl.d/k8s.conf

    - name: Finishing up
      shell: "{{ item }}"
      with_items:
        - setenforce 0
        - sysctl --system
        # - usermod -aG docker $USER
        - iptables -F

    # TODO NOT currently persistent across reboots. Need to do this.
    # echo "loop" | sudo tee /etc/modules-load.d/loop.conf   -----maybe?
    # - name: Set up hugepages
    #   shell: sysctl vm.nr_hugepages=1024

    # # TODO Doesn't seem to be working. Still have to run this myself. Also should make this persistent too.
    # - name: Load loop kernel module
    #   shell: modprobe loop


# https://kubernetes.io/docs/tasks/tools/install-kubeadm/
# https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/
- name: Set up K8S Master
  hosts: tag_kubernetescontrollers
  become: yes
  tasks:

    - name: Initialize k8s master
      shell: kubeadm init --apiserver-cert-extra-sans k8s.labs.networkreliability.engineering
      register: output_init
      ignore_errors: yes

    - name: debug output_init
      debug:
        msg: "{{ output_init }}"

    - name: pause to let services finish starting
      pause:
        seconds: 30
      
    - name: get master token
      shell: kubeadm token list |grep "The default bootstrap token generated by 'kubeadm init'." |awk '{print $1}'
      register: output

    - name: set master token
      set_fact:
        mastertoken: "{{ output.stdout }}"

    - name: show master token
      debug:
        msg: "{{ output }}"

    - name: Get kube config file
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: tmp/kubeconfig
        flat: yes

- name: Set up K8S Workers
  hosts: tag_kubernetesworkers
  become: yes
  tasks:

  - name: docker info for getting cgroup driver
    shell: docker info 2>/dev/null |grep "Cgroup Driver" |awk '{print $3}'
    register: docker_info

  - name: get cgroup driver
    set_fact:
      cgroup_driver: "{{ docker_info.stdout }}"

  - name: set cgroup driver to cgroupfs
    lineinfile:
      path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      regexp: '^Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=.*"'
      line: 'Environment="KUBELET_CGROUP_ARGS=--cgroup-driver={{ cgroup_driver }}"'

  - name: Upload kubeconfig
    copy:
      src: tmp/kubeconfig
      dest: /etc/kubernetes/node-kubeconfig.yaml
      force: no

  - name: enable kubelet service
    systemd:
      name: kubelet
      state: restarted
      daemon_reload: yes
      enabled: True

  - name: join k8s cluster via internal LB DNS name
    shell: "kubeadm join --token {{ hostvars[groups['tag_kubernetescontrollers'] | first].mastertoken }} --discovery-token-unsafe-skip-ca-verification k8sapi.k8sapi-forwarding-rule.il4.us-west1.lb.antidote-216521.internal:6443"
    ignore_errors: yes

- name: Clone antidote repo
  hosts: tag_kubernetes
  gather_facts: no
  tasks:

    - name: Remove antidote repo
      shell: rm -rf ~/antidote

    - name: Clone antidote repo to instance
      git:
        repo: 'https://github.com/nre-learning/antidote'
        dest: ~/antidote/
        force: yes

- name: Set up weave networking
  hosts: tag_kubernetescontrollers
  tasks:

  - name: installweave via vendored manifest
    shell: kubectl apply -f ~/antidote/platform/weaveinstall.yml